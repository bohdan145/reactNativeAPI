import React, { Component } from 'react';
import {
  View,
  FlatList,
  StyleSheet,
  StatusBar,
  Text,
  KeyboardAvoidingView,
  SafeAreaView,
  ActivityIndicator,
} from 'react-native';
import { connect } from 'react-redux';
import Search from 'react-native-search-box';
import * as Animatable from 'react-native-animatable';

import Logo from 'components/Logo';
import LogOut from 'components/LogOut';
import Avatar from 'components/Avatar';
import Card from 'components/Card';
import Preloader from 'components/Preloader';
import Up from 'components/Up';

import { LoadMore, SearchRepo } from 'reduxStore/actions/repos';
import { HEIGHT } from 'utils';

class Main extends Component {
  static navigationOptions = ({ navigation }) => ({
    headerTitle: <Logo text={'GitHub'} size={24} />,
    headerRight: <LogOut />,
    headerLeft: <Avatar size={34} avatar={navigation.getParam('avatar')} />,
  });

  state = {
    upVisible: false,
  };

  list = React.createRef();

  _renderHeader = () => (
    <View style={styles.searchWrapper}>
      <Search
        backgroundColor="#ddd"
        cancelButtonTextStyle={styles.cancelColor}
        inputStyle={styles.white}
        shadowVisible={true}
        autoCapitalize={'none'}
        onSearch={this.onSearch}
      />
    </View>
  );

  onSearch = (searchText = '') => new Promise((resolve, reject) => {
    this.props.handleSearch(searchText);
    resolve();
  });

  _renderItem = ({ item }) => {
    const { navigation } = this.props;
    return <Card {...item} onPress={() => navigation.navigate('ModalScreen', { url: item.html_url })} />;
  };

  _renderEmpty = () => (
    <View style={styles.emptyWrapper} pointerEvents="none">
      <Text style={styles.dimmed}>Start Searching...</Text>
    </View>
  );

  _renderFooter = () => {
    const { fetchingMore } = this.props;
    return (
      <Animatable.View
        transition="opacity"
        useNativeDriver
        style={[styles.footer, { opacity: fetchingMore ? 1 : 0 }]}
        pointerEvents="none"
      >
        <ActivityIndicator size="small" color="#007AFF" />
      </Animatable.View>
    );
  };

  _onScroll = ({
    nativeEvent: {
      contentOffset: { x, y },
    },
  }) => {
    if (y > HEIGHT && !this.state.upVisible) {
      this.setState(() => ({ upVisible: true }));
    }

    if (y < HEIGHT && this.state.upVisible) {
      this.setState(() => ({ upVisible: false }));
    }
  };

  _keyExtractor = item => item.id.toString();

  render() {
    return (
      <SafeAreaView style={styles.wrapper}>
        <StatusBar backgroundColor="#fff" />
        <View style={styles.wrapper}>
          <KeyboardAvoidingView style={styles.flexGrow} behavior="padding">
            <FlatList
              ref={this.list}
              data={this.props.list}
              extraData={this.props.fetchingMore}
              ListHeaderComponent={this._renderHeader}
              ListEmptyComponent={this._renderEmpty}
              ListFooterComponent={this._renderFooter}
              keyExtractor={this._keyExtractor}
              renderItem={this._renderItem}
              onScroll={this._onScroll}
              initialNumToRender={4}
              removeClippedSubviews={true}
              maxToRenderPerBatch={3}
              updateCellsBatchingPeriod={30}
              windowSize={31}
              scrollEventThrottle={16}
              decelerationRate="normal"
              automaticallyAdjustContentInsets={false}
              onEndReachedThreshold={0.25}
              onEndReached={this.props.loadMore}
              contentContainerStyle={styles.flexGrow}
              keyboardShouldPersistTaps="handled"
            />
            <Preloader visible={this.props.visible} absolute={true} />
            <Up visible={this.state.upVisible} style={styles.up} target={this.list} />
          </KeyboardAvoidingView>
        </View>
      </SafeAreaView>
    );
  }
}

const mapStateToProps = ({ repos }) => ({
  list: repos.list,
  visible: repos.loading,
  fetchingMore: repos.fetchingMore,
});

export default connect(
  mapStateToProps,
  dispatch => ({
    handleSearch: text => dispatch(SearchRepo(text)),
    loadMore: () => dispatch(LoadMore()),
  }),
)(Main);

const styles = StyleSheet.create({
  wrapper: {
    flex: 1,
    backgroundColor: 'rgba(244, 244, 244, 1)',
  },
  searchWrapper: {
    // marginVertical: 10,
    margin: 15,
    borderRadius: 8,
    overflow: 'hidden',
  },
  emptyWrapper: {
    ...StyleSheet.absoluteFillObject,
    alignItems: 'center',
    justifyContent: 'center',
  },
  footer: {
    padding: 10,
    marginBottom: 5,
  },
  dimmed: {
    color: '#888',
  },
  flexGrow: {
    flexGrow: 1,
  },
  cancelColor: {
    color: '#007AFF',
  },
  white: {
    backgroundColor: '#fff',
  },
  up: {
    bottom: 15,
    right: 15,
  },
});
