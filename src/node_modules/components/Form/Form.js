import React, { PureComponent } from 'react';
import { View } from 'react-native';
import PropTypes from 'prop-types';
import FlatButton from 'components/FlatButton';
import FormInput from 'components/FormInput';

class Form extends PureComponent {
  constructor(props) {
    super(props);

    // dynamically construct our initial state by using
    // each form field's name as an object property.
    const formFieldNames = this.props.fields.reduce((obj, field) => {
      obj[field.name] = '';
      return obj;
    }, {});

    // define the initial state, so we can use it later on
    // when we'll need to reset the form
    this.initialState = {
      ...formFieldNames,
    };

    this.state = this.initialState;
  }

  _renderFields = () => {
    const { fields = [] } = this.props;

    if (fields.length) {
      return fields.map(({ inputProps = {}, ...field }) => (
        <FormInput
          {...field}
          {...inputProps}
          key={field.name}
          value={this.state[field.name].toString()}
          onChangeText={value => this.setState({ [field.name]: value })}
        />
      ));
    }

    return null;
  };

  _checkDisabled = () => Object.values(this.state).every(el => el.length);

  _handleOnPress = () => this.props.handleSubmit(this.state);

  render() {
    const {
      style, loaded = false, submitBtnTitle, fetching,
    } = this.props;
    if (!loaded) return null;

    return (
      <>
        <View style={[style]}>{this._renderFields()}</View>
        <FlatButton
          text={submitBtnTitle}
          disabled={!this._checkDisabled()}
          activeOpacity={0.85}
          fetching={fetching}
          onPress={this._handleOnPress}
        />
      </>
    );
  }
}

Form.propTypes = {
  handleSubmit: PropTypes.func.isRequired,
  submitBtnTitle: PropTypes.string,
  fetching: PropTypes.bool,
  fields: PropTypes.arrayOf(
    PropTypes.shape({
      name: PropTypes.string,
      label: PropTypes.string,
      type: PropTypes.string,
      inputProps: PropTypes.object,
    }),
  ).isRequired,
};

export default Form;
