import {
  fork, takeLeading, put, delay, call,
} from 'redux-saga/effects';
import { Alert, InteractionManager } from 'react-native';

import { SignIn } from 'reduxStore/actions/app';
import { apiCall, storeLocal } from 'utils';
import Base64 from 'utils/Base64';
import NavigationService from 'utils/NavigationService';

const handleSignIn = (str = '') => apiCall.get('/user', {
  headers: {
    Authorization: `Basic ${str}`,
  },
});

function* watchSignIn() {
  yield takeLeading(SignIn.TRIGGER, function* ({ payload: { username, password } }) {
    try {
      const str = Base64.btoa(`${username}:${password}`);

      yield put(SignIn.request());
      yield delay(500);

      const { data } = yield call(handleSignIn, str);

      yield call(storeLocal, { name: '@userToken', value: str }); // save user token to storage
      yield call(storeLocal, { name: '@user', value: JSON.stringify(data) });
      yield put(SignIn.success(data));

      InteractionManager.runAfterInteractions(() => {
        NavigationService.navigate('MainScreen', { avatar: data.avatar_url });
      });
    } catch (e) {
      const { response } = e;
      if (response) {
        Alert.alert(
          'Error!',
          `${response.data.message}`,
        );
      }
    } finally {
      yield put(SignIn.fulfill());
    }
  });
}

function* appSaga() {
  yield fork(watchSignIn);
}

export default appSaga;
